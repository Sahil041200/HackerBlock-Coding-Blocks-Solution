#include <iostream>

struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(nullptr) {}
};

ListNode* reverseKGroup(ListNode* head, int k) {
    int count = 0;
    ListNode* current = head;
    while (current != nullptr && count < k) {
        current = current->next;
        count++;
    }

    if (count < k) {
        return head;  // The remaining group has fewer than k elements, so no need to reverse
    }

    ListNode* prev = nullptr;
    current = head;
    for (int i = 0; i < k; i++) {
        ListNode* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    head->next = reverseKGroup(current, k);

    return prev;
}

void printLinkedList(ListNode* head) {
    ListNode* current = head;
    while (current != nullptr) {
        std::cout << current->val << " ";
        current = current->next;
    }
    std::cout << std::endl;
}

int main() {
    int N, K;
    std::cin >> N >> K;

    ListNode* head = nullptr;
    ListNode* tail = nullptr;

    // Input for the linked list
    for (int i = 0; i < N; i++) {
        int value;
        std::cin >> value;
        ListNode* newNode = new ListNode(value);
        if (head == nullptr) {
            head = newNode;
            tail = newNode;
        } else {
            tail->next = newNode;
            tail = newNode;
        }
    }

    head = reverseKGroup(head, K);
    printLinkedList(head);

    // Free allocated memory
    while (head != nullptr) {
        ListNode* temp = head;
        head = head->next;
        delete temp;
    }

    return 0;
}

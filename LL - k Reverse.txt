#include <iostream>
using namespace std;

// Define the structure of a linked list node
struct Node {
    int data;
    Node* next;
};

// Function to create a new node
Node* newNode(int data) {
    Node* node = new Node;
    node->data = data;
    node->next = nullptr;
    return node;
}

// Function to reverse a linked list in groups of k
Node* reverseKGroup(Node* head, int k) {
    Node* current = head;
    Node* next = nullptr;
    Node* prev = nullptr;
    int count = 0;

    // Count the number of nodes in the current group
    Node* temp = head;
    while (temp != nullptr && count < k) {
        temp = temp->next;
        count++;
    }

    // If the group size is less than k, no need to reverse
    if (count < k) {
        return head;
    }

    // Reverse the group
    count = 0;
    while (current != nullptr && count < k) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
        count++;
    }

    // Recursively reverse the rest of the list
    if (next != nullptr) {
        head->next = reverseKGroup(next, k);
    }

    return prev;
}

// Function to print a linked list
void printLinkedList(Node* head) {
    while (head) {
        cout << head->data << " ";
        head = head->next;
    }
    cout << endl;
}

int main() {
    int N, K;
    cin >> N >> K;

    Node* head = nullptr;
    Node* tail = nullptr;

    for (int i = 0; i < N; i++) {
        int data;
        cin >> data;
        Node* newNode = new Node;
        newNode->data = data;
        newNode->next = nullptr;
        if (tail == nullptr) {
            head = newNode;
            tail = newNode;
        } else {
            tail->next = newNode;
            tail = newNode;
        }
    }

    head = reverseKGroup(head, K);
    printLinkedList(head);

    return 0;
}

#include <iostream>
#include <climits>

using namespace std;

int minCost(int** cost, int N) {
    int dp[N][3];
    
    // Initializing the dp array
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < 3; ++j) {
            dp[i][j] = cost[i][j];
        }
    }

    for (int i = 1; i < N; ++i) {
        for (int j = 0; j < 3; ++j) {
            dp[i][j] += min(dp[i - 1][(j + 1) % 3], dp[i - 1][(j + 2) % 3]);
        }
    }

    return min(dp[N - 1][0], min(dp[N - 1][1], dp[N - 1][2]));
}

int main() {
    int T;
    cin >> T;

    while (T--) {
        int N;
        cin >> N;

        int** cost = new int*[N];
        for (int i = 0; i < N; ++i) {
            cost[i] = new int[3];
            for (int j = 0; j < 3; ++j) {
                cin >> cost[i][j];
            }
        }

        int result = minCost(cost, N);

        cout << result << endl;

        // Deallocate memory
        for (int i = 0; i < N; ++i) {
            delete[] cost[i];
        }
        delete[] cost;
    }

    return 0;
}

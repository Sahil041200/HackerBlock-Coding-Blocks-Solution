#include <iostream>

class Node {
public:
    int data;
    Node* next;
    Node(int val) : data(val), next(nullptr) {}
};

Node* appendLastKToFirst(Node* head, int K) {
    if (head == nullptr || K == 0) {
        return head;  // Nothing to append
    }

    Node* current = head;
    int N = 1; // Initialize N with 1 for the head node

    // Find the length of the linked list (N)
    while (current->next) {
        current = current->next;
        N++;
    }

    // Calculate the number of elements to append
    int numToAppend = K % N;

    if (numToAppend == 0) {
        return head; // No need to modify the list
    }

    // Traverse the list again to find the new head and tail
    current = head;
    for (int i = 1; i < N - numToAppend; i++) {
        current = current->next;
    }

    Node* newHead = current->next;
    current->next = nullptr; // Set the new tail's next to nullptr
    current = newHead;
    while (current->next) {
        current = current->next;
    }

    current->next = head; // Connect the old head to the old tail

    return newHead;
}

void printLinkedList(Node* head) {
    Node* current = head;
    while (current) {
        std::cout << current->data << " ";
        current = current->next;
    }
    std::cout << std::endl;
}

int main() {
    int N, K;
    std::cin >> N;

    Node* head = nullptr;
    Node* tail = nullptr;

    // Input for the linked list
    for (int i = 0; i < N; i++) {
        int value;
        std::cin >> value;
        Node* newNode = new Node(value);
        if (head == nullptr) {
            head = newNode;
            tail = newNode;
        } else {
            tail->next = newNode;
            tail = newNode;
        }
    }

    std::cin >> K;

    head = appendLastKToFirst(head, K);
    printLinkedList(head);

    // Free allocated memory
    while (head != nullptr) {
        Node* temp = head;
        head = head->next;
        delete temp;
    }

    return 0;
}

#include <iostream>
#include <vector>

using namespace std;

long long maxPathSum(vector<int>& arr1, vector<int>& arr2) {
    int n = arr1.size();
    int m = arr2.size();

    int i = 0, j = 0;
    long long sum1 = 0, sum2 = 0, maxSum = 0;

    while (i < n && j < m) {
        if (arr1[i] < arr2[j]) {
            sum1 += arr1[i++];
        } else if (arr1[i] > arr2[j]) {
            sum2 += arr2[j++];
        } else {
            maxSum += max(sum1, sum2) + arr1[i];
            sum1 = 0;
            sum2 = 0;
            i++;
            j++;
        }
    }

    while (i < n) {
        sum1 += arr1[i++];
    }

    while (j < m) {
        sum2 += arr2[j++];
    }

    maxSum += max(sum1, sum2);

    return maxSum;
}

int main() {
    int t;
    cin >> t;

    while (t--) {
        int n, m;
        cin >> n >> m;

        vector<int> arr1(n), arr2(m);

        for (int i = 0; i < n; i++) {
            cin >> arr1[i];
        }

        for (int i = 0; i < m; i++) {
            cin >> arr2[i];
        }

        long long result = maxPathSum(arr1, arr2);
        cout << result << endl;
    }

    return 0;
}

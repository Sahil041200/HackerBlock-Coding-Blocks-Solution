#include <iostream>
#include <vector>
#include <queue>
using namespace std;

typedef pair<int, pair<int, int>> pii;

vector<int> mergeKSortedArrays(vector<vector<int>>& arrays, int k, int n) {
    vector<int> result;
    priority_queue<pii, vector<pii>, greater<pii>> minHeap;

    // Push the first element from each array into the min heap along with its array number and index
    for (int i = 0; i < k; ++i) {
        minHeap.push({arrays[i][0], {i, 0}});
    }

    // Merge the arrays
    while (!minHeap.empty()) {
        pii curr = minHeap.top();
        minHeap.pop();

        int val = curr.first;
        int arrIdx = curr.second.first;
        int eleIdx = curr.second.second;

        result.push_back(val);

        // Move to the next element in the array
        if (eleIdx + 1 < n) {
            minHeap.push({arrays[arrIdx][eleIdx + 1], {arrIdx, eleIdx + 1}});
        }
    }

    return result;
}

int main() {
    int k, n;
    cin >> k >> n;

    vector<vector<int>> arrays(k, vector<int>(n));

    // Input the sorted arrays
    for (int i = 0; i < k; ++i) {
        for (int j = 0; j < n; ++j) {
            cin >> arrays[i][j];
        }
    }

    // Merge the arrays and get the sorted result
    vector<int> sortedArray = mergeKSortedArrays(arrays, k, n);

    // Output the sorted array
    for (int i = 0; i < sortedArray.size(); ++i) {
        cout << sortedArray[i] << " ";
    }
    cout << endl;

    return 0;
}

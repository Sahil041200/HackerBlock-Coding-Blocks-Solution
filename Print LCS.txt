#include <iostream>
#include <vector>
#include <string>
using namespace std;

string longestCommonSubsequence(string A, string B) {
    int m = A.length();
    int n = B.length();

    vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));

    // Building the DP table to find LCS
    for (int i = 1; i <= m; ++i) {
        for (int j = 1; j <= n; ++j) {
            if (A[i - 1] == B[j - 1]) {
                dp[i][j] = 1 + dp[i - 1][j - 1];
            } else {
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
            }
        }
    }

    // Reconstruct LCS
    string lcs = "";
    int i = m, j = n;
    while (i > 0 && j > 0) {
        if (A[i - 1] == B[j - 1]) {
            lcs = A[i - 1] + lcs;
            i--;
            j--;
        } else if (dp[i - 1][j] > dp[i][j - 1]) {
            i--;
        } else {
            j--;
        }
    }

    return lcs;
}

int main() {
    string A, B;
    cin >> A >> B;

    string result = longestCommonSubsequence(A, B);
    cout << result << endl;

    return 0;
}

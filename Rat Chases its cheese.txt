#include <iostream>
#include <vector>

using namespace std;

const int MAX_N = 10;
const int MAX_M = 10;

int N, M;
char grid[MAX_N][MAX_M];
int path[MAX_N][MAX_M];

bool isSafe(int x, int y) {
    return x >= 0 && x < N && y >= 0 && y < M && grid[x][y] == 'O' && path[x][y] == 0;
}

bool findPath(int x, int y) {
    if (x == N - 1 && y == M - 1) {
        path[x][y] = 1; // Mark the destination
        return true;
    }

    if (isSafe(x, y)) {
        path[x][y] = 1; // Mark the current cell as part of the path

        // Try moving in all four directions (up, down, left, right)
        if (findPath(x + 1, y) || findPath(x - 1, y) || findPath(x, y + 1) || findPath(x, y - 1)) {
            return true;
        }

        path[x][y] = 0; // Backtrack
    }

    return false;
}

int main() {
    cin >> N >> M;

    for (int i = 0; i < N; i++) {
        for (int j = 0; j < M; j++) {
            cin >> grid[i][j];
            path[i][j] = 0;
        }
    }

    if (findPath(0, 0)) {
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                cout << path[i][j] << " ";
            }
            cout << endl;
        }
    } else {
        cout << "NO PATH FOUND" << endl;
    }

    return 0;
}

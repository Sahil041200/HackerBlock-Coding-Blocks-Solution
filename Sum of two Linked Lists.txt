#include <bits/stdc++.h>
using namespace std;

class node
{
public:
    int data;
    node *next;

    node(int d)
    {
        data = d;
        next = NULL;
    }
};

void insertAtHead(node *&head, int d) // insert at head
{
    if (head == NULL)
    {
        head = new node(d);
        return;
    }

    node * n = new node(d);
    n->next = head;
    head = n;
}

vector<int>ans;

void printReverse(node *head)
{
    while (head != NULL)
    {
        ans.push_back(head->data); // u cant traverse back so store in vector and then reverse it ans print
        head = head->next;
    }
    reverse(ans.begin(),ans.end());
    for(auto x : ans)cout<<x<<" ";

    cout << endl;
    return;
}

node* addListsRecursive(node* &node1, node* &node2, int &carry)
    {
        if (node1 == NULL && node2 == NULL)
        {
            if (carry > 0)
            {
                return new node(carry);
            }
            return NULL;
        }
         
        int value1 = (node1 != NULL) ? node1->data : 0;
        int value2 = (node2 != NULL) ? node2->data : 0;
         
        int sum = (value1 + value2 + carry) % 10;
        carry   = (value1 + value2 + carry) / 10;
         
        node* currentHead = new node(sum);
         
        node* node1Next = (node1 != NULL) ? node1->next : NULL;
        node* node2Next = (node2 != NULL) ? node2->next : NULL;
 
        currentHead->next = addListsRecursive(node1Next, node2Next, carry);
         
        return currentHead;
}

int main()
{
    node*head1 = NULL;
    node*head2 = NULL;
    int n, m;
    cin >> n >> m;
    int no;
    for (int i = 0; i < n; i++)
    {
        cin >> no;
        insertAtHead (head1, no);
    }
    int num;
    for (int i = 0; i < m; i++)
    {
        cin >> num; // not no
        insertAtHead (head2, num);
    }

    int carry = 0;
    node* newHead = addListsRecursive (head1, head2, carry);
    printReverse (newHead);

    return 0;
}
#include<bits/stdc++.h>
#define int long long
using namespace std;

int vivekGame(int *arr,int *pre,int s,int e){
	//base cases
	if (s>=e){
		return 0;
	}
	if ((s+1)==e){
		if (arr[s]==arr[e]){
			return 1;
		}else{
			return 0;
		}
	}

	int smallans=0;
	for (int i=s;i<e;i++){
		if ((pre[i+1]-pre[s])==(pre[e+1]-pre[i+1])){
            int ans1=(max(vivekGame(arr,pre,s,i),vivekGame(arr,pre,i+1,e)))+1;
			smallans=max(smallans,ans1);
            // Since only one break point possible break after that point is founnd
			break;
		}
	}
	return smallans;
}

int32_t main() {
    // Always use fast IO
	ios_base::sync_with_stdio(NULL);
    cin.tie(0);cout.tie(0);
	int t;
	cin>>t;
	while(t--){
		int n;
		cin>>n;
		int arr[n];
		for (int i=0;i<n;i++){
			cin>>arr[i];
		}
        int pre[n+1];
        pre[0]=0;
        for (int i=1;i<=n;i++){    
            pre[i]=pre[i-1]+arr[i-1];
        }
        // No need of map for any array there will be only one break point
        // Greedy and divide and conquer question not DP
		cout<<vivekGame(arr,pre,0,n-1)<<endl;
	}
	return 0;
}
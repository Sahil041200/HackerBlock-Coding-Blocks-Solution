#include <iostream>
#include <vector>

using namespace std;

pair<int, int> findUniqueNumbers(vector<int>& nums) {
    int xor_result = 0;

    // Calculate XOR of all numbers
    for (int num : nums) {
        xor_result ^= num;
    }

    // Find the rightmost set bit in XOR result
    int rightmost_set_bit = xor_result & -xor_result;

    // Initialize two unique numbers
    int unique1 = 0, unique2 = 0;

    // Divide the numbers into two groups based on the rightmost set bit
    for (int num : nums) {
        if ((num & rightmost_set_bit) == 0) {
            unique1 ^= num;
        } else {
            unique2 ^= num;
        }
    }

    return make_pair(unique1, unique2);
}

int main() {
    int n;
    cin >> n;

    vector<int> nums(n);

    for (int i = 0; i < n; i++) {
        cin >> nums[i];
    }

    pair<int, int> result = findUniqueNumbers(nums);

    cout << result.first << " " << result.second << endl;

    return 0;
}

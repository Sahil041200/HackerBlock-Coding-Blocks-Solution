#include <iostream>
#include <vector>
#include <queue>
using namespace std;

class TreeNode {
public:
    int val;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int value) : val(value), left(nullptr), right(nullptr) {}
};

// Function to insert a new node into the binary tree
TreeNode* insert(TreeNode* root, int value) {
    if (root == nullptr) {
        return new TreeNode(value);
    }

    queue<TreeNode*> q;
    q.push(root);

    while (!q.empty()) {
        TreeNode* current = q.front();
        q.pop();

        if (current->left == nullptr) {
            current->left = new TreeNode(value);
            return root;
        } else {
            q.push(current->left);
        }

        if (current->right == nullptr) {
            current->right = new TreeNode(value);
            return root;
        } else {
            q.push(current->right);
        }
    }

    return root;
}

void findKDistanceNodes(TreeNode* root, int k, vector<int>& result) {
    if (root == nullptr) {
        return;
    }

    if (k == 0) {
        result.push_back(root->val);
        return;
    }

    findKDistanceNodes(root->left, k - 1, result);
    findKDistanceNodes(root->right, k - 1, result);
}

int findTarget(TreeNode* root, int target, int k, vector<int>& result) {
    if (root == nullptr) {
        return -1;
    }

    if (root->val == target) {
        findKDistanceNodes(root, k, result);
        return 0;
    }

    int leftDist = findTarget(root->left, target, k, result);
    if (leftDist >= 0) {
        if (leftDist + 1 == k) {
            result.push_back(root->val);
        } else {
            findKDistanceNodes(root->right, k - leftDist - 2, result);
        }
        return leftDist + 1;
    }

    int rightDist = findTarget(root->right, target, k, result);
    if (rightDist >= 0) {
        if (rightDist + 1 == k) {
            result.push_back(root->val);
        } else {
            findKDistanceNodes(root->left, k - rightDist - 2, result);
        }
        return rightDist + 1;
    }

    return -1;
}

int main() {
    int n;
    cin >> n;

    vector<int> nodes(n);
    for (int i = 0; i < n; i++) {
        cin >> nodes[i];
    }

    int target, k;
    cin >> target >> k;

    TreeNode* root = nullptr;

    // Build the binary tree from the input values
    for (int i = 0; i < n; i++) {
        root = insert(root, nodes[i]);
    }

    vector<int> result;
    findTarget(root, target, k, result);

    for (int val : result) {
        cout << val << endl;
    }

    return 0;
}

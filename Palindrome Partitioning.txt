#include <iostream>
#include <vector>
using namespace std;

bool isPalindrome(const string& s, int start, int end) {
    while (start < end) {
        if (s[start] != s[end]) {
            return false;
        }
        start++;
        end--;
    }
    return true;
}

int minCut(string s) {
    int n = s.length();
    if (n <= 1) {
        return 0;
    }

    vector<int> dp(n, 0);
    vector<vector<bool>> isPal(n, vector<bool>(n, false));

    for (int i = 0; i < n; ++i) {
        int minCuts = i;
        for (int j = 0; j <= i; ++j) {
            if (s[i] == s[j] && (i - j < 2 || isPal[j + 1][i - 1])) {
                isPal[j][i] = true;
                minCuts = (j == 0) ? 0 : min(minCuts, dp[j - 1] + 1);
            }
        }
        dp[i] = minCuts;
    }

    return dp[n - 1];
}

int main() {
    int t;
    cin >> t;

    while (t--) {
        string s;
        cin >> s;

        int result = minCut(s);
        cout << result << endl;
    }

    return 0;
}

#include <iostream>

struct Node {
    int data;
    Node* next;
    Node(int val) : data(val), next(nullptr) {}
};

Node* findKthFromEnd(Node* head, int k) {
    Node* slow = head;
    Node* fast = head;

    // Move the fast pointer k nodes ahead
    for (int i = 0; i < k; i++) {
        if (fast == nullptr) {
            return nullptr; // k is greater than the number of nodes
        }
        fast = fast->next;
    }

    // Move both pointers until the fast pointer reaches the end
    while (fast != nullptr) {
        slow = slow->next;
        fast = fast->next;
    }

    return slow;
}

int main() {
    Node* head = nullptr;
    int value;

    // Input the linked list
    while (true) {
        std::cin >> value;
        if (value == -1) {
            break;
        }

        Node* newNode = new Node(value);
        if (head == nullptr) {
            head = newNode;
        } else {
            Node* current = head;
            while (current->next != nullptr) {
                current = current->next;
            }
            current->next = newNode;
        }
    }

    int k;
    std::cin >> k;

    Node* result = findKthFromEnd(head, k);

    if (result != nullptr) {
        std::cout << result->data << std::endl;
    } else {
        std::cout << "Invalid value of k" << std::endl;
    }

    // Free allocated memory
    while (head != nullptr) {
        Node* temp = head;
        head = head->next;
        delete temp;
    }

    return 0;
}

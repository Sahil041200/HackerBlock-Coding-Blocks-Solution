#include <iostream>
#include <vector>
#include <set>

using namespace std;

const int xInc[] = {-1, 1, -1, 1, -2, 2, -2, 2};
const int yInc[] = {-2, 2, 2, -2, -1, 1, 1, -1};

set<string> solutionSet;

bool isSafe(vector<vector<int>>& board, int x, int y, int n) {
    for (int i = 0; i < 8; i++) {
        int x1 = x + xInc[i];
        int y1 = y + yInc[i];
        if (x1 >= 0 && x1 < n && y1 >= 0 && y1 < n) {
            if (board[x1][y1] == 1) {
                return false;
            }
        }
    }
    return true;
}

void printSoln(vector<vector<int>>& board, int n) {
    string s = "{";
    bool first = true;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (board[i][j] == 1) {
                if (!first) {
                    s += "} {";
                }
                s += to_string(i) + "-" + to_string(j);
                first = false;
            }
        }
    }
    s += "}";
    solutionSet.insert(s);
}

void solve(vector<vector<int>>& board, int x, int y, int placed, int n) {
    if (placed == n) {
        printSoln(board, n);
        return;
    }

    for (int i = x; i < n; i++) {
        for (int j = (i == x) ? y : 0; j < n; j++) {
            if (board[i][j] == 0 && isSafe(board, i, j, n)) {
                board[i][j] = 1;
                solve(board, i, j, placed + 1, n);
                board[i][j] = 0;
            }
        }
    }
}

int main() {
    int n;
    cin >> n;
    vector<vector<int>> board(n, vector<int>(n, 0));

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            board[i][j] = 1;  // Place the first knight at (i, j)
            solve(board, i, j, 1, n);
            board[i][j] = 0;  // Reset the board
        }
    }

    for (string s : solutionSet) {
        cout << s << " ";
    }
    cout << endl << solutionSet.size() << endl;
    return 0;
}
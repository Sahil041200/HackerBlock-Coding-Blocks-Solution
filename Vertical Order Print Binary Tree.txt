#include<queue>
#include<iostream>
#include<algorithm>
#include<string>
#include<map>
#include<vector>
using namespace std;

class node{
    public:
    int data;
    node *left;
    node *right;

    node(int x){
        data=x;
        left=NULL;
        right=NULL;

    }
    node(){
         data=0;
        left=NULL;
        right=NULL;
    }
};




void printLeftView(node*root,int level,int &maxlevel){

    if(root==NULL){return;}
    if(maxlevel<level){
        //have discovered new level
        cout<<root->data<<" ";
        maxlevel=level;

    }
     //root
    //right
    //left
    printLeftView(root->left,level+1,maxlevel);
    printLeftView(root->right,level+1,maxlevel);



     
}
// void levelOrderBuild(node* &root) {

// 	int d; cin >> d;
// 	root = new node(d);

// 	queue<node*> q;
// 	q.push(root);

// 	while (!q.empty()) {
// 		node *f = q.front();
// 		q.pop();

// 		int c1, c2; cin >> c1 >> c2;

// 		if (c1 != -1) {
// 			f->left = new node(c1);
// 			q.push(f->left);
// 		}

// 		if (c2 != -1) {
// 			f->right = new node(c2);
// 			q.push(f->right);
// 		}
// 	}
// }

  void levelOrderBuild(node* &root,int n,int i) {

	int d; cin >> d;
	root = new node(d);

	queue<node*> q;
	q.push(root);
    

	while (!q.empty()) {
        
		node *f = q.front();
		q.pop();

		int c1, c2; cin >> c1 >> c2;

		if (c1 != -1) {
			f->left = new node(c1);
			q.push(f->left);
		}

		if (c2 != -1) {
			f->right = new node(c2);
			q.push(f->right);
		}
	}
}


//Function to find the vertical order traversal of Binary Tree.
map<int,vector<int>>m;

void verticalOrder(int k,node*root){
	if(root==NULL)return;
    // whenever u reach a width (k) insert to thar index
	m[k].push_back(root->data);
	verticalOrder(k-1, root->left);
	verticalOrder(k+1, root->right);
}

int main()
{
	node* root=NULL;
    int n;
    cin>>n;
    levelOrderBuild(root,n,0);
//4 2 1 5 6 3 8 7 9
   	verticalOrder(0,root);

	for(auto l : m){
		for(auto x : l.second){
			cout<<x<<" ";
		}
	}
   
    return 0;

}
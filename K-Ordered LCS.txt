#include <iostream>
#include <vector>
using namespace std;

int kOrderedLCS(vector<int>& seq1, vector<int>& seq2, int k) {
    int n = seq1.size();
    int m = seq2.size();

    // Initialize a 3D DP array to store k-ordered LCS
    vector<vector<vector<int>>> dp(n + 1, vector<vector<int>>(m + 1, vector<int>(k + 1, 0)));

    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= m; ++j) {
            for (int l = 0; l <= k; ++l) {
                if (seq1[i - 1] == seq2[j - 1]) {
                    // If current elements are equal, choose maximum between preserving or changing the element
                    dp[i][j][l] = 1 + dp[i - 1][j - 1][l];
                } else {
                    // Else, choose maximum between the options of changing the elements
                    dp[i][j][l] = max(dp[i - 1][j][l], dp[i][j - 1][l]);
                    if (l > 0) {
                        dp[i][j][l] = max(dp[i][j][l], 1 + dp[i - 1][j - 1][l - 1]);
                    }
                }
            }
        }
    }

    return dp[n][m][k];
}

int main() {
    int N, M, k;
    cin >> N >> M >> k;

    vector<int> seq1(N);
    vector<int> seq2(M);

    for (int i = 0; i < N; ++i) {
        cin >> seq1[i];
    }

    for (int i = 0; i < M; ++i) {
        cin >> seq2[i];
    }

    int result = kOrderedLCS(seq1, seq2, k);
    cout << result << endl;

    return 0;
}

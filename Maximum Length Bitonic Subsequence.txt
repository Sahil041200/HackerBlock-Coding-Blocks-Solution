#include <iostream>
#include <vector>
using namespace std;

int bitonicSubsequenceLength(const vector<int>& arr) {
    int n = arr.size();
    vector<int> lis(n, 1);
    vector<int> lds(n, 1);

    for (int i = 1; i < n; ++i) {
        for (int j = 0; j < i; ++j) {
            if (arr[i] > arr[j] && lis[i] < lis[j] + 1)
                lis[i] = lis[j] + 1;
        }
    }

    for (int i = n - 2; i >= 0; --i) {
        for (int j = n - 1; j > i; --j) {
            if (arr[i] > arr[j] && lds[i] < lds[j] + 1)
                lds[i] = lds[j] + 1;
        }
    }

    int maxLength = 1;
    for (int i = 0; i < n; ++i)
        maxLength = max(maxLength, lis[i] + lds[i] - 1);

    return maxLength;
}

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<int> arr(n);
        for (int i = 0; i < n; ++i)
            cin >> arr[i];

        int result = bitonicSubsequenceLength(arr);
        cout << result << endl;
    }
    return 0;
}

#include <bits/stdc++.h>
using namespace std;

class Node {
public:
    int data;
    Node* next;
    Node(int d) {
        data = d;
        next = NULL;
    }
};

// head - Head pointer of the Linked List
// Return a boolean value indicating the presence of a cycle
// If the cycle is present, modify the linked list to remove the cycle as well
bool floydCycleRemoval(Node* head) {
    if (head == NULL || head->next == NULL) {
        return false;  // No cycle can exist with less than 2 nodes
    }

    Node* slow = head;
    Node* fast = head;

    // Step 1: Detect the cycle using Floyd's Tortoise and Hare algorithm
    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
        if (slow == fast) {
            // Cycle detected
            break;
        }
    }

    if (slow != fast) {
        return false;  // No cycle detected
    }

    // Step 2: Remove the cycle
    slow = head;
    while (slow->next != fast->next) {
        slow = slow->next;
        fast = fast->next;
    }

    fast->next = NULL;  // Remove the cycle

    return true;  // Cycle was detected and removed
}

void buildCycleList(Node*& head) {
    unordered_map<int, Node*> hash;
    int x;
    cin >> x;
    if (x == -1) {
        head = NULL;
        return;
    }
    head = new Node(x);
    hash[x] = head;
    Node* current = head;
    while (x != -1) {
        cin >> x;
        if (x == -1) break;
        if (hash.find(x) != hash.end()) {
            current->next = hash[x];
            return;
        }
        Node* n = new Node(x);
        current->next = n;
        current = n;
        hash[x] = n;
    }
    current->next = NULL;
}

void printLinkedList(Node* head) {
    unordered_set<int> s;
    while (head != NULL) {
        if (s.find(head->data) != s.end()) {
            cout << "\nCycle detected at " << head->data;
            return;
        }
        cout << head->data << " ";
        s.insert(head->data);
        head = head->next;
    }
}

int main() {
    Node* head = NULL;

    buildCycleList(head);

    bool cyclePresent = floydCycleRemoval(head);
    if (cyclePresent) {
        cout << "Cycle was present\n";
    } else {
        cout << "No cycle\n";
    }

    cout << "Linked List - ";
    printLinkedList(head);

    return 0;
}

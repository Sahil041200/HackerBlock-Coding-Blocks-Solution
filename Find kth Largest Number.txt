#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int findKthLargest(vector<int>& nums, int k) {
    priority_queue<int, vector<int>, greater<int>> minHeap;

    // Push first k elements into the min heap
    for (int i = 0; i < k; ++i) {
        minHeap.push(nums[i]);
    }

    // For the remaining elements, if the element is larger than the root of the min heap,
    // replace the root with the current element
    for (int i = k; i < nums.size(); ++i) {
        if (nums[i] > minHeap.top()) {
            minHeap.pop();
            minHeap.push(nums[i]);
        }
    }

    // The top of the min heap will contain the kth largest element
    return minHeap.top();
}

int main() {
    int n, k;
    cin >> n >> k;

    vector<int> nums(n);
    for (int i = 0; i < n; ++i) {
        cin >> nums[i];
    }

    int result = findKthLargest(nums, k);
    cout << result << endl;

    return 0;
}

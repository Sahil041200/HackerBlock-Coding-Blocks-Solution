#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int maxSubarraySum(vector<int>& nums) {
    int n = nums.size();

    int maxSum = nums[0];
    int currentMax = nums[0];
    for (int i = 1; i < n; ++i) {
        currentMax = max(nums[i], currentMax + nums[i]);
        maxSum = max(maxSum, currentMax);
    }

    return maxSum;
}

int maxCircularSubarraySum(vector<int>& nums) {
    int n = nums.size();

    int kadaneSum = maxSubarraySum(nums);

    int totalSum = 0;
    for (int i = 0; i < n; ++i) {
        totalSum += nums[i];
    }

    for (int i = 0; i < n; ++i) {
        nums[i] = -nums[i];
    }
    int invertedKadaneSum = maxSubarraySum(nums);

    int circularSum = totalSum + invertedKadaneSum;

    return max(kadaneSum, circularSum);
}

int main() {
    int t;
    cin >> t;

    while (t--) {
        int n;
        cin >> n;

        vector<int> nums(n);
        for (int i = 0; i < n; ++i) {
            cin >> nums[i];
        }

        int maxCircularSum = maxCircularSubarraySum(nums);
        cout << maxCircularSum << endl;
    }

    return 0;
}
